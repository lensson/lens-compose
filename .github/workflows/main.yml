# This is a basic workflow to help you get started with Actions

name: CD to ucloud

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'debug'
      tags:
        description: 'Build scenario tags' 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Deploy to UCLOUD
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.UCLOUD_HOST }}
          username: ${{ secrets.UCLOUD_USERNAME }}
          password: ${{ secrets.UCLOUD_PASSWORD }}
          #key : ${{ secrets.UCLOUD_PRIVATE_KEY }}
          port: ${{ secrets.UCLOUD_PORT }}
          script: |
            ls -al
            echo "Start pull lens-solution infratructure images"
            echo "===== Try to pull image lensson/lens-nsgateway:latest ====="
            out=$(docker pull lensson/lens-nsgateway:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-nsgateway is updated to newest!"
            else
              echo "lensson/lens-nsgateway is already up to date..."
            fi

            echo "===== Try to pull image lensson/lens-auth:latest ====="
            out=$(docker pull lensson/lens-auth:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-auth is updated to newest!"
            else
              echo "lensson/lens-auth is already up to date..."
            fi
            echo "Finish pull lens-solution infratructure images"
            echo "Start pull lens-blog images"
            echo "===== Try to pull image lensson/lens-blog-admin-backend:latest ====="
            out=$(docker pull lensson/lens-blog-admin-backend:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-blog-admin-backend is updated to newest!"
            else
              echo "lensson/lens-blog-admin-backend is already up to date..."
            fi

            echo "===== Try to pull image lensson/lens-blog-backend:latest ====="
            out=$(docker pull lensson/lens-blog-backend:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-blog-backend is updated to newest!"
            else
              echo "lensson/lens-blog-backend is already up to date..."
            fi

            echo "===== Try to pull image lensson/lens-blog-monitor:latest ====="
            out=$(docker pull lensson/lens-blog-monitor:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-blog-monitor is updated to newest!"
            else
              echo "lensson/lens-blog-monitor is already up to date..."
            fi

            echo "===== Try to pull image lensson/lens-blog-search:latest ====="
            out=$(docker pull lensson/lens-blog-search:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-blog-search is updated to newest!"
            else
              echo "lensson/lens-blog-search is already up to date..."
            fi

            echo "===== Try to pull image lensson/lens-blog-picture:latest ====="
            out=$(docker pull lensson/lens-blog-picture:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-blog-picture is updated to newest!"
            else
              echo "lensson/lens-blog-picture is already up to date..."
            fi

            echo "===== Try to pull image lensson/lens-blog-sms:latest ====="
            out=$(docker pull lensson/lens-blog-sms:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-blog-sms is updated to newest!"
            else
              echo "lensson/lens-blog-sms is already up to date..."
            fi



            echo "===== Try to pull image lensson/lens-gzh-backend:latest ====="
            out=$(docker pull lensson/lens-gzh-backend:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-gzh-backend is updated to newest!"
            else
              echo "lensson/lens-gzh-backend is already up to date..."
            fi

            echo "===== Try to pull image lensson/lens-gzh-frontend:latest ====="
            out=$(docker pull lensson/lens-gzh-frontend:latest)
            if [[ $out != *"up to date"* ]]; then
              echo "lensson/lens-gzh-frontend is updated to newest!"
            else
              echo "lensson/lens-gzh-frontend is already up to date..."
            fi



